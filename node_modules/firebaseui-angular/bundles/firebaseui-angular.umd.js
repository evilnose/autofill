(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('angularfire2/auth'), require('firebaseui'), require('tslib'), require('firebase'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('firebaseui-angular', ['exports', '@angular/core', 'angularfire2/auth', 'firebaseui', 'tslib', 'firebase', '@angular/common'], factory) :
    (factory((global['firebaseui-angular'] = {}),global.ng.core,null,null,global.tslib,null,global.ng.common));
}(this, (function (exports,i0,i1,firebaseui,tslib_1,firebase,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FirebaseuiAngularLibraryService = (function () {
        function FirebaseuiAngularLibraryService(angularFireAuth) {
            // store the firebaseui instance on the window object to prevent double initialization
            if (!((window)).firebaseUiInstance) {
                ((window)).firebaseUiInstance = new firebaseui.auth.AuthUI(angularFireAuth.auth);
            }
            this.firebaseUiInstance = /** @type {?} */ (((window)).firebaseUiInstance);
        }
        FirebaseuiAngularLibraryService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        FirebaseuiAngularLibraryService.ctorParameters = function () {
            return [
                { type: i1.AngularFireAuth, },
            ];
        };
        /** @nocollapse */ FirebaseuiAngularLibraryService.ngInjectableDef = i0.defineInjectable({ factory: function FirebaseuiAngularLibraryService_Factory() { return new FirebaseuiAngularLibraryService(i0.inject(i1.AngularFireAuth)); }, token: FirebaseuiAngularLibraryService, providedIn: "root" });
        return FirebaseuiAngularLibraryService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /*
     * Created by Raphael Jenni
     * Copyright (c) 2017 Raphael Jenni
     */
    var FirebaseUIAuthConfig = (function () {
        function FirebaseUIAuthConfig() {
        }
        return FirebaseUIAuthConfig;
    }());
    var FirebaseUISignInSuccess = (function () {
        function FirebaseUISignInSuccess() {
        }
        return FirebaseUISignInSuccess;
    }());
    /** @enum {number} */
    var CredentialHelper = {
        AccountChooser: 0,
        OneTap: 1,
        None: 2,
    };
    CredentialHelper[CredentialHelper.AccountChooser] = "AccountChooser";
    CredentialHelper[CredentialHelper.OneTap] = "OneTap";
    CredentialHelper[CredentialHelper.None] = "None";
    /** @enum {number} */
    var AuthProvider = {
        Google: 0,
        Facebook: 1,
        Twitter: 2,
        Github: 3,
        Password: 4,
        Phone: 5,
    };
    AuthProvider[AuthProvider.Google] = "Google";
    AuthProvider[AuthProvider.Facebook] = "Facebook";
    AuthProvider[AuthProvider.Twitter] = "Twitter";
    AuthProvider[AuthProvider.Github] = "Github";
    AuthProvider[AuthProvider.Password] = "Password";
    AuthProvider[AuthProvider.Phone] = "Phone";
    /** @enum {number} */
    var AuthMethods = {
        Popup: 0,
        Redirect: 1,
    };
    AuthMethods[AuthMethods.Popup] = "Popup";
    AuthMethods[AuthMethods.Redirect] = "Redirect";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GoogleAuthProvider = firebase.auth.GoogleAuthProvider;
    var FacebookAuthProvider = firebase.auth.FacebookAuthProvider;
    var TwitterAuthProvider = firebase.auth.TwitterAuthProvider;
    var GithubAuthProvider = firebase.auth.GithubAuthProvider;
    var EmailAuthProvider = firebase.auth.EmailAuthProvider;
    var PhoneAuthProvider = firebase.auth.PhoneAuthProvider;
    var FirebaseuiAngularLibraryComponent = (function () {
        function FirebaseuiAngularLibraryComponent(angularFireAuth, firebaseUiConfig, firebaseUIService) {
            this.angularFireAuth = angularFireAuth;
            this.firebaseUiConfig = firebaseUiConfig;
            this.firebaseUIService = firebaseUIService;
            this.signInSuccessCallback = new i0.EventEmitter();
        }
        /**
         * @param {?} provider
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.getAuthProvider = /**
         * @param {?} provider
         * @return {?}
         */
            function (provider) {
                switch (provider) {
                    case AuthProvider.Google:
                        return GoogleAuthProvider.PROVIDER_ID;
                    case AuthProvider.Facebook:
                        return FacebookAuthProvider.PROVIDER_ID;
                    case AuthProvider.Twitter:
                        return TwitterAuthProvider.PROVIDER_ID;
                    case AuthProvider.Github:
                        return GithubAuthProvider.PROVIDER_ID;
                    case AuthProvider.Password:
                        return EmailAuthProvider.PROVIDER_ID;
                    case AuthProvider.Phone:
                        return PhoneAuthProvider.PROVIDER_ID;
                }
            };
        /**
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.subscription = this.angularFireAuth.authState.subscribe(function (value) {
                    if (!value) {
                        if (_this.firebaseUiConfig.providers.length !== 0) {
                            _this.firebaseUIPopup();
                        }
                        else {
                            throw new Error('There must be at least one AuthProvider.');
                        }
                    }
                });
            };
        /**
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (!!this.subscription) {
                    this.subscription.unsubscribe();
                }
            };
        /**
         * @param {?} authConfig
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.getUIAuthConfig = /**
         * @param {?} authConfig
         * @return {?}
         */
            function (authConfig) {
                var _this = this;
                var /** @type {?} */ authProviders = [];
                try {
                    for (var _a = tslib_1.__values(authConfig.providers), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var provider = _b.value;
                        if (!!((provider)).customConfig) {
                            provider = ((provider));
                            var /** @type {?} */ providerWithConfig = provider.customConfig;
                            providerWithConfig['provider'] = FirebaseuiAngularLibraryComponent.getAuthProvider(provider.provider);
                            authProviders.push(providerWithConfig);
                        }
                        else {
                            authProviders.push(FirebaseuiAngularLibraryComponent.getAuthProvider(/** @type {?} */ (provider)));
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                var /** @type {?} */ tosURL = authConfig.tos ? authConfig.tos : '';
                var /** @type {?} */ authMethod = 'popup';
                switch (authConfig.method) {
                    case AuthMethods.Redirect:
                        authMethod = 'redirect';
                        break;
                    case null:
                    case AuthMethods.Popup:
                    default:
                        break;
                }
                var /** @type {?} */ credentialHelper;
                switch (authConfig.credentialHelper) {
                    case CredentialHelper.None:
                        credentialHelper = firebaseui.auth.CredentialHelper.NONE;
                        break;
                    case CredentialHelper.OneTap:
                        credentialHelper = firebaseui.auth.CredentialHelper.GOOGLE_YOLO;
                        break;
                    case CredentialHelper.AccountChooser:
                    default:
                        credentialHelper = firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM;
                        break;
                }
                var /** @type {?} */ nativeConfiguration = {
                    callbacks: {
                        signInSuccess: function (currentUser, credential, redirectUrl) {
                            _this.signInSuccessCallback.emit({
                                currentUser: currentUser,
                                credential: credential,
                                redirectUrl: redirectUrl
                            });
                            return !!authConfig.signInSuccessUrl;
                        }
                    },
                    signInFlow: authMethod,
                    signInOptions: authProviders,
                    tosUrl: tosURL,
                    credentialHelper: credentialHelper
                };
                if (!!authConfig.signInSuccessUrl) {
                    nativeConfiguration.signInSuccessUrl = authConfig.signInSuccessUrl;
                }
                return nativeConfiguration;
                var e_1, _c;
            };
        /**
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.firebaseUIPopup = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;
                firebaseUiInstance.start('#firebaseui-auth-container', this.getUIAuthConfig(this.firebaseUiConfig));
            };
        FirebaseuiAngularLibraryComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'firebase-ui',
                        template: "\n    <div id=\"firebaseui-auth-container\"></div>"
                    },] },
        ];
        /** @nocollapse */
        FirebaseuiAngularLibraryComponent.ctorParameters = function () {
            return [
                { type: i1.AngularFireAuth, },
                { type: FirebaseUIAuthConfig, },
                { type: FirebaseuiAngularLibraryService, },
            ];
        };
        FirebaseuiAngularLibraryComponent.propDecorators = {
            "signInSuccessCallback": [{ type: i0.Output, args: ['signInSuccess',] },],
        };
        return FirebaseuiAngularLibraryComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FirebaseUIModule = (function () {
        function FirebaseUIModule() {
        }
        /**
         * @param {?} firebaseUiAuthConfig
         * @return {?}
         */
        FirebaseUIModule.forRoot = /**
         * @param {?} firebaseUiAuthConfig
         * @return {?}
         */
            function (firebaseUiAuthConfig) {
                return {
                    ngModule: FirebaseUIModule,
                    providers: [
                        { provide: FirebaseUIAuthConfig, useValue: firebaseUiAuthConfig }
                    ]
                };
            };
        FirebaseUIModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [FirebaseuiAngularLibraryComponent],
                        exports: [FirebaseuiAngularLibraryComponent]
                    },] },
        ];
        return FirebaseUIModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.FirebaseuiAngularLibraryService = FirebaseuiAngularLibraryService;
    exports.FirebaseuiAngularLibraryComponent = FirebaseuiAngularLibraryComponent;
    exports.FirebaseUIAuthConfig = FirebaseUIAuthConfig;
    exports.FirebaseUISignInSuccess = FirebaseUISignInSuccess;
    exports.CredentialHelper = CredentialHelper;
    exports.AuthProvider = AuthProvider;
    exports.AuthMethods = AuthMethods;
    exports.FirebaseUIModule = FirebaseUIModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,