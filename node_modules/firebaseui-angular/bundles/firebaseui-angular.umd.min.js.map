{"version":3,"sources":["ng://firebaseui-angular/lib/firebaseui-angular-library.service.ts","ng://firebaseui-angular/lib/firebaseui-angular-library.helper.ts","ng://firebaseui-angular/lib/firebaseui-angular-library.component.ts","ng://firebaseui-angular/lib/firebaseui-angular-library.module.ts"],"names":["FirebaseuiAngularLibraryService","angularFireAuth","firebaseUiInstance","firebaseui.auth","AuthUI","auth","this","Injectable","args","providedIn","AngularFireAuth","FirebaseUIAuthConfig","FirebaseUISignInSuccess","GoogleAuthProvider","firebase.auth","FacebookAuthProvider","TwitterAuthProvider","GithubAuthProvider","EmailAuthProvider","PhoneAuthProvider","FirebaseuiAngularLibraryComponent","firebaseUiConfig","firebaseUIService","EventEmitter","getAuthProvider","provider","AuthProvider","Google","PROVIDER_ID","Facebook","Twitter","Github","Password","Phone","prototype","ngOnInit","_this","subscription","authState","subscribe","value","providers","length","Error","firebaseUIPopup","ngOnDestroy","unsubscribe","getUIAuthConfig","authConfig","authProviders","_a","tslib_1.__values","_b","next","done","customConfig","providerWithConfig","push","credentialHelper","tosURL","tos","authMethod","method","AuthMethods","Redirect","Popup","CredentialHelper","None","NONE","OneTap","GOOGLE_YOLO","AccountChooser","ACCOUNT_CHOOSER_COM","nativeConfiguration","callbacks","signInSuccess","currentUser","credential","redirectUrl","signInSuccessCallback","emit","signInSuccessUrl","signInFlow","signInOptions","tosUrl","start","Component","selector","template","Output","FirebaseUIModule","forRoot","firebaseUiAuthConfig","ngModule","provide","useValue","NgModule","imports","CommonModule","declarations","exports"],"mappings":"wfAAA,IAAAA,EAAA,WAUE,SAAAA,EAAYC,GAEL,OAAcC,qBACjB,OAAcA,mBAAqB,IAAIC,EAAAA,KAAgBC,OAAOH,EAAgBI,OAEhFC,KAAKJ,mBAAqB,OAA0D,8CAXvFK,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAJNC,EAAAA,qJADR,GCUAC,eAQAC,8YCTA,IAAOC,EAAqBC,EAAAA,KAAcD,mBACnCE,EAAuBD,EAAAA,KAAcC,qBACrCC,EAAsBF,EAAAA,KAAcE,oBACpCC,EAAqBH,EAAAA,KAAcG,mBACnCC,EAAoBJ,EAAAA,KAAcI,kBAClCC,EAAoBL,EAAAA,KAAcK,kBACzCC,EAAA,WAgCE,SAAAA,EAAoBnB,EACAoB,EACAC,GAFAhB,KAAAL,gBAAAA,EACAK,KAAAe,iBAAAA,EACAf,KAAAgB,kBAAAA,6BAvBoE,IAAIC,EAAAA,oBAI7EH,EAAAI,yBAAgBC,GAC7B,OAAQA,GACN,KAAKC,EAAaC,OAChB,OAAOd,EAAmBe,YAC5B,KAAKF,EAAaG,SAChB,OAAOd,EAAqBa,YAC9B,KAAKF,EAAaI,QAChB,OAAOd,EAAoBY,YAC7B,KAAKF,EAAaK,OAChB,OAAOd,EAAmBW,YAC5B,KAAKF,EAAaM,SAChB,OAAOd,EAAkBU,YAC3B,KAAKF,EAAaO,MAChB,OAAOd,EAAkBS,cAS/BR,EAAAc,UAAAC,SAAA,WAAA,IAAAC,EAAA9B,KACEA,KAAK+B,aAAe/B,KAAKL,gBAAgBqC,UAAUC,UAAU,SAAAC,GAC3D,IAAKA,EAAO,CACV,GAA+C,IAA3CJ,EAAKf,iBAAiBoB,UAAUC,OAGlC,MAAM,IAAIC,MAAM,4CAFhBP,EAAKQ,sBAQbxB,EAAAc,UAAAW,YAAA,WACQvC,KAAK+B,cACT/B,KAAK+B,aAAaS,eAId1B,EAAAc,UAAAa,yBAAgBC,cAChBC,EAA+B,OACrC,IAAqB,IAAAC,EAAAC,EAAAA,SAAAH,EAAWP,WAASW,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAA,CAApC,IAAI5B,EAAQ2B,EAAAZ,MACf,GAAM,EAA2Ce,aAAc,CAG7D,IAAMC,GAFN/B,EAAQ,GAE4B8B,aACpCC,EAA6B,SAAIpC,EAAkCI,gBAAgBC,EAASA,UAE5FwB,EAAcQ,KAAKD,QAEnBP,EAAcQ,KAAKrC,EAAkCI,gBAAe,yGAIxE,IAaIkC,EAbEC,EAASX,EAAWY,IAAMZ,EAAWY,IAAM,GAE7CC,EAAa,QACjB,OAAQb,EAAWc,QACjB,KAAKC,EAAYC,SACfH,EAAa,WACb,MACF,KAAK,KACL,KAAKE,EAAYE,OAMnB,OAAQjB,EAAWU,kBACjB,KAAKQ,EAAiBC,KACpBT,EAAmBvD,EAAAA,KAAgB+D,iBAAiBE,KACpD,MACF,KAAKF,EAAiBG,OACpBX,EAAmBvD,EAAAA,KAAgB+D,iBAAiBI,YACpD,MACF,KAAKJ,EAAiBK,eACtB,QACEb,EAAmBvD,EAAAA,KAAgB+D,iBAAiBM,oBAIxD,QAAMC,EAAqD,CACzDC,UAAW,CACTC,cAAe,SAACC,EAAaC,EAAYC,GAMvC,OALA1C,EAAK2C,sBAAsBC,KAAK,CAC9BJ,YAAWA,EACXC,WAAUA,EACVC,YAAWA,MAEJ9B,EAAWiC,mBAGxBC,WAAYrB,EACZsB,cAAelC,EACfmC,OAAQzB,EACRD,iBAAkBA,GAKpB,OAHMV,EAAWiC,mBACfR,EAAoBQ,iBAAmBjC,EAAWiC,kBAE7CR,GAGDrD,EAAAc,UAAAU,2BACqBtC,KAAKgB,kBAAkBpB,mBAC/BmF,MAAM,6BAA8B/E,KAAKyC,gBAAgBzC,KAAKe,wCArHpFiE,EAAAA,UAAS9E,KAAA,CAAC,CACT+E,SAAU,cACVC,SAAU,gGALJ9E,EAAAA,uBAXNC,SAYMX,oDASLyF,EAAAA,OAAMjF,KAAA,CAAC,sBAXV,GCfAkF,EAAA,gCAaSA,EAAAC,QAAP,SAAeC,GACb,MAAO,CACLC,SAAUH,EACVjD,UAAW,CACT,CAACqD,QAASnF,EAAsBoF,SAAUH,0BAZjDI,EAAAA,SAAQxF,KAAA,CAAC,CACRyF,QAAS,CACPC,EAAAA,cAEFC,aAAc,CAAC/E,GACfgF,QAAS,CAAChF,SAVZ","sourcesContent":["import { Injectable } from '@angular/core';\nimport {AngularFireAuth} from 'angularfire2/auth';\nimport * as firebaseui from 'firebaseui';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirebaseuiAngularLibraryService {\n  public firebaseUiInstance: firebaseui.auth.AuthUI;\n\n  constructor(angularFireAuth: AngularFireAuth) {\n    // store the firebaseui instance on the window object to prevent double initialization\n    if (!(<any>window).firebaseUiInstance) {\n      (<any>window).firebaseUiInstance = new firebaseui.auth.AuthUI(angularFireAuth.auth);\n    }\n    this.firebaseUiInstance = (<any>window).firebaseUiInstance as firebaseui.auth.AuthUI;\n  }\n}\n","\n/*\n * Created by Raphael Jenni\n * Copyright (c) 2017 Raphael Jenni\n */\n\nimport * as firebase from 'firebase/app';\nimport AuthCredential = firebase.auth.AuthCredential;\nimport User = firebase.User;\n\nexport class FirebaseUIAuthConfig {\n    providers: Array<AuthProvider | AuthProviderWithCustomConfig>;\n    method?: AuthMethods;\n    signInSuccessUrl?: string;\n    tos?: string;\n    credentialHelper?: CredentialHelper;\n}\n\nexport class FirebaseUISignInSuccess {\n    currentUser: User;\n    credential: AuthCredential;\n    redirectUrl: string;\n}\n\nexport enum CredentialHelper {\n    AccountChooser, OneTap, None\n}\n\nexport enum AuthProvider {\n    Google, Facebook, Twitter, Github, Password, Phone\n}\n\nexport interface AuthProviderWithCustomConfig {\n    provider: AuthProvider;\n    customConfig: Object;\n}\n\nexport enum AuthMethods {\n    Popup, Redirect\n}\n","import {Component, EventEmitter, OnDestroy, OnInit, Output} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {\n  AuthMethods, AuthProvider,\n  AuthProviderWithCustomConfig, CredentialHelper,\n  FirebaseUIAuthConfig,\n  FirebaseUISignInSuccess\n} from './firebaseui-angular-library.helper';\nimport * as firebase from 'firebase';\nimport GoogleAuthProvider = firebase.auth.GoogleAuthProvider;\nimport FacebookAuthProvider = firebase.auth.FacebookAuthProvider;\nimport TwitterAuthProvider = firebase.auth.TwitterAuthProvider;\nimport GithubAuthProvider = firebase.auth.GithubAuthProvider;\nimport EmailAuthProvider = firebase.auth.EmailAuthProvider;\nimport PhoneAuthProvider = firebase.auth.PhoneAuthProvider;\nimport * as firebaseui from 'firebaseui';\nimport {AngularFireAuth} from 'angularfire2/auth';\nimport {FirebaseuiAngularLibraryService} from './firebaseui-angular-library.service';\n\n@Component({\n  selector: 'firebase-ui',\n  template: `\n    <div id=\"firebaseui-auth-container\"></div>`\n})\nexport class FirebaseuiAngularLibraryComponent implements OnInit, OnDestroy {\n\n  @Output('signInSuccess') signInSuccessCallback: EventEmitter<FirebaseUISignInSuccess> = new EventEmitter();\n\n  private subscription: Subscription;\n\n  private static getAuthProvider(provider: AuthProvider): string {\n    switch (provider) {\n      case AuthProvider.Google:\n        return GoogleAuthProvider.PROVIDER_ID;\n      case AuthProvider.Facebook:\n        return FacebookAuthProvider.PROVIDER_ID;\n      case AuthProvider.Twitter:\n        return TwitterAuthProvider.PROVIDER_ID;\n      case AuthProvider.Github:\n        return GithubAuthProvider.PROVIDER_ID;\n      case AuthProvider.Password:\n        return EmailAuthProvider.PROVIDER_ID;\n      case AuthProvider.Phone:\n        return PhoneAuthProvider.PROVIDER_ID;\n    }\n  }\n\n  constructor(private angularFireAuth: AngularFireAuth,\n              private firebaseUiConfig: FirebaseUIAuthConfig,\n              private firebaseUIService: FirebaseuiAngularLibraryService) {\n  }\n\n  ngOnInit(): void {\n    this.subscription = this.angularFireAuth.authState.subscribe(value => {\n      if (!value) {\n        if (this.firebaseUiConfig.providers.length !== 0) {\n          this.firebaseUIPopup();\n        } else {\n          throw new Error('There must be at least one AuthProvider.');\n        }\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (!!this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  private getUIAuthConfig(authConfig: FirebaseUIAuthConfig): Object {\n    const authProviders: Array<Object> = [];\n    for (let provider of authConfig.providers) {\n      if (!!(provider as AuthProviderWithCustomConfig).customConfig) {\n        provider = (provider as AuthProviderWithCustomConfig);\n\n        const providerWithConfig = provider.customConfig;\n        providerWithConfig['provider'] = FirebaseuiAngularLibraryComponent.getAuthProvider(provider.provider);\n\n        authProviders.push(providerWithConfig);\n      } else {\n        authProviders.push(FirebaseuiAngularLibraryComponent.getAuthProvider(provider as AuthProvider));\n      }\n    }\n\n    const tosURL = authConfig.tos ? authConfig.tos : '';\n\n    let authMethod = 'popup';\n    switch (authConfig.method) {\n      case AuthMethods.Redirect:\n        authMethod = 'redirect';\n        break;\n      case null:\n      case AuthMethods.Popup:\n      default:\n        break;\n    }\n\n    let credentialHelper;\n    switch (authConfig.credentialHelper) {\n      case CredentialHelper.None:\n        credentialHelper = firebaseui.auth.CredentialHelper.NONE;\n        break;\n      case CredentialHelper.OneTap:\n        credentialHelper = firebaseui.auth.CredentialHelper.GOOGLE_YOLO;\n        break;\n      case CredentialHelper.AccountChooser:\n      default:\n        credentialHelper = firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM;\n        break;\n    }\n\n    const nativeConfiguration: FirebaseUINativeConfiguration = {\n      callbacks: {\n        signInSuccess: (currentUser, credential, redirectUrl) => {\n          this.signInSuccessCallback.emit({\n            currentUser,\n            credential,\n            redirectUrl\n          });\n          return !!authConfig.signInSuccessUrl;\n        }\n      },\n      signInFlow: authMethod,\n      signInOptions: authProviders,\n      tosUrl: tosURL,\n      credentialHelper: credentialHelper\n    };\n    if (!!authConfig.signInSuccessUrl) {\n      nativeConfiguration.signInSuccessUrl = authConfig.signInSuccessUrl;\n    }\n    return nativeConfiguration;\n  }\n\n  private firebaseUIPopup() {\n    const firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;\n    firebaseUiInstance.start('#firebaseui-auth-container', this.getUIAuthConfig(this.firebaseUiConfig));\n  }\n}\n\ninterface FirebaseUINativeConfiguration {\n  callbacks?: any;\n  credentialHelper?: any;\n  queryParameterForSignInSuccessUrl?: string;\n  queryParameterForWidgetMode?: string;\n  signInFlow?: string;\n  signInOptions?: any;\n  signInSuccessUrl?: string;\n  tosUrl: string;\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {FirebaseuiAngularLibraryComponent} from './firebaseui-angular-library.component';\nimport {CommonModule} from '@angular/common';\nimport {FirebaseUIAuthConfig} from './firebaseui-angular-library.helper';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [FirebaseuiAngularLibraryComponent],\n  exports: [FirebaseuiAngularLibraryComponent]\n})\nexport class FirebaseUIModule {\n  static forRoot(firebaseUiAuthConfig: FirebaseUIAuthConfig): ModuleWithProviders {\n    return {\n      ngModule: FirebaseUIModule,\n      providers: [\n        {provide: FirebaseUIAuthConfig, useValue: firebaseUiAuthConfig}\n      ]\n    };\n  }\n}\n"]}