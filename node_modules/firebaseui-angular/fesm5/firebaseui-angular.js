import { Injectable, NgModule, defineInjectable, inject, EventEmitter, Component, Output } from '@angular/core';
import { AngularFireAuth } from 'angularfire2/auth';
import { auth } from 'firebaseui';
import { __values } from 'tslib';
import { auth as auth$1 } from 'firebase';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FirebaseuiAngularLibraryService = /** @class */ (function () {
    function FirebaseuiAngularLibraryService(angularFireAuth) {
        // store the firebaseui instance on the window object to prevent double initialization
        if (!(/** @type {?} */ (window)).firebaseUiInstance) {
            (/** @type {?} */ (window)).firebaseUiInstance = new auth.AuthUI(angularFireAuth.auth);
        }
        this.firebaseUiInstance = /** @type {?} */ ((/** @type {?} */ (window)).firebaseUiInstance);
    }
    FirebaseuiAngularLibraryService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    FirebaseuiAngularLibraryService.ctorParameters = function () { return [
        { type: AngularFireAuth, },
    ]; };
    /** @nocollapse */ FirebaseuiAngularLibraryService.ngInjectableDef = defineInjectable({ factory: function FirebaseuiAngularLibraryService_Factory() { return new FirebaseuiAngularLibraryService(inject(AngularFireAuth)); }, token: FirebaseuiAngularLibraryService, providedIn: "root" });
    return FirebaseuiAngularLibraryService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Created by Raphael Jenni
 * Copyright (c) 2017 Raphael Jenni
 */
var FirebaseUIAuthConfig = /** @class */ (function () {
    function FirebaseUIAuthConfig() {
    }
    return FirebaseUIAuthConfig;
}());
var FirebaseUISignInSuccess = /** @class */ (function () {
    function FirebaseUISignInSuccess() {
    }
    return FirebaseUISignInSuccess;
}());
/** @enum {number} */
var CredentialHelper = {
    AccountChooser: 0,
    OneTap: 1,
    None: 2,
};
CredentialHelper[CredentialHelper.AccountChooser] = "AccountChooser";
CredentialHelper[CredentialHelper.OneTap] = "OneTap";
CredentialHelper[CredentialHelper.None] = "None";
/** @enum {number} */
var AuthProvider = {
    Google: 0,
    Facebook: 1,
    Twitter: 2,
    Github: 3,
    Password: 4,
    Phone: 5,
};
AuthProvider[AuthProvider.Google] = "Google";
AuthProvider[AuthProvider.Facebook] = "Facebook";
AuthProvider[AuthProvider.Twitter] = "Twitter";
AuthProvider[AuthProvider.Github] = "Github";
AuthProvider[AuthProvider.Password] = "Password";
AuthProvider[AuthProvider.Phone] = "Phone";
/** @enum {number} */
var AuthMethods = {
    Popup: 0,
    Redirect: 1,
};
AuthMethods[AuthMethods.Popup] = "Popup";
AuthMethods[AuthMethods.Redirect] = "Redirect";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GoogleAuthProvider = auth$1.GoogleAuthProvider;
var FacebookAuthProvider = auth$1.FacebookAuthProvider;
var TwitterAuthProvider = auth$1.TwitterAuthProvider;
var GithubAuthProvider = auth$1.GithubAuthProvider;
var EmailAuthProvider = auth$1.EmailAuthProvider;
var PhoneAuthProvider = auth$1.PhoneAuthProvider;
var FirebaseuiAngularLibraryComponent = /** @class */ (function () {
    function FirebaseuiAngularLibraryComponent(angularFireAuth, firebaseUiConfig, firebaseUIService) {
        this.angularFireAuth = angularFireAuth;
        this.firebaseUiConfig = firebaseUiConfig;
        this.firebaseUIService = firebaseUIService;
        this.signInSuccessCallback = new EventEmitter();
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    FirebaseuiAngularLibraryComponent.getAuthProvider = /**
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        switch (provider) {
            case AuthProvider.Google:
                return GoogleAuthProvider.PROVIDER_ID;
            case AuthProvider.Facebook:
                return FacebookAuthProvider.PROVIDER_ID;
            case AuthProvider.Twitter:
                return TwitterAuthProvider.PROVIDER_ID;
            case AuthProvider.Github:
                return GithubAuthProvider.PROVIDER_ID;
            case AuthProvider.Password:
                return EmailAuthProvider.PROVIDER_ID;
            case AuthProvider.Phone:
                return PhoneAuthProvider.PROVIDER_ID;
        }
    };
    /**
     * @return {?}
     */
    FirebaseuiAngularLibraryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscription = this.angularFireAuth.authState.subscribe(function (value) {
            if (!value) {
                if (_this.firebaseUiConfig.providers.length !== 0) {
                    _this.firebaseUIPopup();
                }
                else {
                    throw new Error('There must be at least one AuthProvider.');
                }
            }
        });
    };
    /**
     * @return {?}
     */
    FirebaseuiAngularLibraryComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (!!this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    /**
     * @param {?} authConfig
     * @return {?}
     */
    FirebaseuiAngularLibraryComponent.prototype.getUIAuthConfig = /**
     * @param {?} authConfig
     * @return {?}
     */
    function (authConfig) {
        var _this = this;
        var /** @type {?} */ authProviders = [];
        try {
            for (var _a = __values(authConfig.providers), _b = _a.next(); !_b.done; _b = _a.next()) {
                var provider = _b.value;
                if (!!(/** @type {?} */ (provider)).customConfig) {
                    provider = (/** @type {?} */ (provider));
                    var /** @type {?} */ providerWithConfig = provider.customConfig;
                    providerWithConfig['provider'] = FirebaseuiAngularLibraryComponent.getAuthProvider(provider.provider);
                    authProviders.push(providerWithConfig);
                }
                else {
                    authProviders.push(FirebaseuiAngularLibraryComponent.getAuthProvider(/** @type {?} */ (provider)));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var /** @type {?} */ tosURL = authConfig.tos ? authConfig.tos : '';
        var /** @type {?} */ authMethod = 'popup';
        switch (authConfig.method) {
            case AuthMethods.Redirect:
                authMethod = 'redirect';
                break;
            case null:
            case AuthMethods.Popup:
            default:
                break;
        }
        var /** @type {?} */ credentialHelper;
        switch (authConfig.credentialHelper) {
            case CredentialHelper.None:
                credentialHelper = auth.CredentialHelper.NONE;
                break;
            case CredentialHelper.OneTap:
                credentialHelper = auth.CredentialHelper.GOOGLE_YOLO;
                break;
            case CredentialHelper.AccountChooser:
            default:
                credentialHelper = auth.CredentialHelper.ACCOUNT_CHOOSER_COM;
                break;
        }
        var /** @type {?} */ nativeConfiguration = {
            callbacks: {
                signInSuccess: function (currentUser, credential, redirectUrl) {
                    _this.signInSuccessCallback.emit({
                        currentUser: currentUser,
                        credential: credential,
                        redirectUrl: redirectUrl
                    });
                    return !!authConfig.signInSuccessUrl;
                }
            },
            signInFlow: authMethod,
            signInOptions: authProviders,
            tosUrl: tosURL,
            credentialHelper: credentialHelper
        };
        if (!!authConfig.signInSuccessUrl) {
            nativeConfiguration.signInSuccessUrl = authConfig.signInSuccessUrl;
        }
        return nativeConfiguration;
        var e_1, _c;
    };
    /**
     * @return {?}
     */
    FirebaseuiAngularLibraryComponent.prototype.firebaseUIPopup = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;
        firebaseUiInstance.start('#firebaseui-auth-container', this.getUIAuthConfig(this.firebaseUiConfig));
    };
    FirebaseuiAngularLibraryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'firebase-ui',
                    template: "\n    <div id=\"firebaseui-auth-container\"></div>"
                },] },
    ];
    /** @nocollapse */
    FirebaseuiAngularLibraryComponent.ctorParameters = function () { return [
        { type: AngularFireAuth, },
        { type: FirebaseUIAuthConfig, },
        { type: FirebaseuiAngularLibraryService, },
    ]; };
    FirebaseuiAngularLibraryComponent.propDecorators = {
        "signInSuccessCallback": [{ type: Output, args: ['signInSuccess',] },],
    };
    return FirebaseuiAngularLibraryComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FirebaseUIModule = /** @class */ (function () {
    function FirebaseUIModule() {
    }
    /**
     * @param {?} firebaseUiAuthConfig
     * @return {?}
     */
    FirebaseUIModule.forRoot = /**
     * @param {?} firebaseUiAuthConfig
     * @return {?}
     */
    function (firebaseUiAuthConfig) {
        return {
            ngModule: FirebaseUIModule,
            providers: [
                { provide: FirebaseUIAuthConfig, useValue: firebaseUiAuthConfig }
            ]
        };
    };
    FirebaseUIModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [FirebaseuiAngularLibraryComponent],
                    exports: [FirebaseuiAngularLibraryComponent]
                },] },
    ];
    return FirebaseUIModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { FirebaseuiAngularLibraryService, FirebaseuiAngularLibraryComponent, FirebaseUIAuthConfig, FirebaseUISignInSuccess, CredentialHelper, AuthProvider, AuthMethods, FirebaseUIModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,