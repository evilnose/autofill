/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, EventEmitter, Output } from '@angular/core';
import { AuthMethods, AuthProvider, CredentialHelper, FirebaseUIAuthConfig } from './firebaseui-angular-library.helper';
import * as firebase from 'firebase';
var GoogleAuthProvider = firebase.auth.GoogleAuthProvider;
var FacebookAuthProvider = firebase.auth.FacebookAuthProvider;
var TwitterAuthProvider = firebase.auth.TwitterAuthProvider;
var GithubAuthProvider = firebase.auth.GithubAuthProvider;
var EmailAuthProvider = firebase.auth.EmailAuthProvider;
var PhoneAuthProvider = firebase.auth.PhoneAuthProvider;
import * as firebaseui from 'firebaseui';
import { AngularFireAuth } from 'angularfire2/auth';
import { FirebaseuiAngularLibraryService } from './firebaseui-angular-library.service';
export class FirebaseuiAngularLibraryComponent {
    /**
     * @param {?} angularFireAuth
     * @param {?} firebaseUiConfig
     * @param {?} firebaseUIService
     */
    constructor(angularFireAuth, firebaseUiConfig, firebaseUIService) {
        this.angularFireAuth = angularFireAuth;
        this.firebaseUiConfig = firebaseUiConfig;
        this.firebaseUIService = firebaseUIService;
        this.signInSuccessCallback = new EventEmitter();
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    static getAuthProvider(provider) {
        switch (provider) {
            case AuthProvider.Google:
                return GoogleAuthProvider.PROVIDER_ID;
            case AuthProvider.Facebook:
                return FacebookAuthProvider.PROVIDER_ID;
            case AuthProvider.Twitter:
                return TwitterAuthProvider.PROVIDER_ID;
            case AuthProvider.Github:
                return GithubAuthProvider.PROVIDER_ID;
            case AuthProvider.Password:
                return EmailAuthProvider.PROVIDER_ID;
            case AuthProvider.Phone:
                return PhoneAuthProvider.PROVIDER_ID;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscription = this.angularFireAuth.authState.subscribe(value => {
            if (!value) {
                if (this.firebaseUiConfig.providers.length !== 0) {
                    this.firebaseUIPopup();
                }
                else {
                    throw new Error('There must be at least one AuthProvider.');
                }
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (!!this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    /**
     * @param {?} authConfig
     * @return {?}
     */
    getUIAuthConfig(authConfig) {
        const /** @type {?} */ authProviders = [];
        for (let /** @type {?} */ provider of authConfig.providers) {
            if (!!(/** @type {?} */ (provider)).customConfig) {
                provider = (/** @type {?} */ (provider));
                const /** @type {?} */ providerWithConfig = provider.customConfig;
                providerWithConfig['provider'] = FirebaseuiAngularLibraryComponent.getAuthProvider(provider.provider);
                authProviders.push(providerWithConfig);
            }
            else {
                authProviders.push(FirebaseuiAngularLibraryComponent.getAuthProvider(/** @type {?} */ (provider)));
            }
        }
        const /** @type {?} */ tosURL = authConfig.tos ? authConfig.tos : '';
        let /** @type {?} */ authMethod = 'popup';
        switch (authConfig.method) {
            case AuthMethods.Redirect:
                authMethod = 'redirect';
                break;
            case null:
            case AuthMethods.Popup:
            default:
                break;
        }
        let /** @type {?} */ credentialHelper;
        switch (authConfig.credentialHelper) {
            case CredentialHelper.None:
                credentialHelper = firebaseui.auth.CredentialHelper.NONE;
                break;
            case CredentialHelper.OneTap:
                credentialHelper = firebaseui.auth.CredentialHelper.GOOGLE_YOLO;
                break;
            case CredentialHelper.AccountChooser:
            default:
                credentialHelper = firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM;
                break;
        }
        const /** @type {?} */ nativeConfiguration = {
            callbacks: {
                signInSuccess: (currentUser, credential, redirectUrl) => {
                    this.signInSuccessCallback.emit({
                        currentUser,
                        credential,
                        redirectUrl
                    });
                    return !!authConfig.signInSuccessUrl;
                }
            },
            signInFlow: authMethod,
            signInOptions: authProviders,
            tosUrl: tosURL,
            credentialHelper: credentialHelper
        };
        if (!!authConfig.signInSuccessUrl) {
            nativeConfiguration.signInSuccessUrl = authConfig.signInSuccessUrl;
        }
        return nativeConfiguration;
    }
    /**
     * @return {?}
     */
    firebaseUIPopup() {
        const /** @type {?} */ firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;
        firebaseUiInstance.start('#firebaseui-auth-container', this.getUIAuthConfig(this.firebaseUiConfig));
    }
}
FirebaseuiAngularLibraryComponent.decorators = [
    { type: Component, args: [{
                selector: 'firebase-ui',
                template: `
    <div id="firebaseui-auth-container"></div>`
            },] },
];
/** @nocollapse */
FirebaseuiAngularLibraryComponent.ctorParameters = () => [
    { type: AngularFireAuth, },
    { type: FirebaseUIAuthConfig, },
    { type: FirebaseuiAngularLibraryService, },
];
FirebaseuiAngularLibraryComponent.propDecorators = {
    "signInSuccessCallback": [{ type: Output, args: ['signInSuccess',] },],
};
function FirebaseuiAngularLibraryComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    FirebaseuiAngularLibraryComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    FirebaseuiAngularLibraryComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    FirebaseuiAngularLibraryComponent.propDecorators;
    /** @type {?} */
    FirebaseuiAngularLibraryComponent.prototype.signInSuccessCallback;
    /** @type {?} */
    FirebaseuiAngularLibraryComponent.prototype.subscription;
    /** @type {?} */
    FirebaseuiAngularLibraryComponent.prototype.angularFireAuth;
    /** @type {?} */
    FirebaseuiAngularLibraryComponent.prototype.firebaseUiConfig;
    /** @type {?} */
    FirebaseuiAngularLibraryComponent.prototype.firebaseUIService;
}
/**
 * @record
 */
function FirebaseUINativeConfiguration() { }
function FirebaseUINativeConfiguration_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.callbacks;
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.credentialHelper;
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.queryParameterForSignInSuccessUrl;
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.queryParameterForWidgetMode;
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.signInFlow;
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.signInOptions;
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.signInSuccessUrl;
    /** @type {?} */
    FirebaseUINativeConfiguration.prototype.tosUrl;
}

//# sourceMappingURL=data:application/json;base64,