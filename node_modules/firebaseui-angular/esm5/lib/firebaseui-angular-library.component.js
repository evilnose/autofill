/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Output } from '@angular/core';
import { AuthMethods, AuthProvider, CredentialHelper, FirebaseUIAuthConfig } from './firebaseui-angular-library.helper';
import * as firebase from 'firebase';
var GoogleAuthProvider = firebase.auth.GoogleAuthProvider;
var FacebookAuthProvider = firebase.auth.FacebookAuthProvider;
var TwitterAuthProvider = firebase.auth.TwitterAuthProvider;
var GithubAuthProvider = firebase.auth.GithubAuthProvider;
var EmailAuthProvider = firebase.auth.EmailAuthProvider;
var PhoneAuthProvider = firebase.auth.PhoneAuthProvider;
import * as firebaseui from 'firebaseui';
import { AngularFireAuth } from 'angularfire2/auth';
import { FirebaseuiAngularLibraryService } from './firebaseui-angular-library.service';
var FirebaseuiAngularLibraryComponent = /** @class */ (function () {
    function FirebaseuiAngularLibraryComponent(angularFireAuth, firebaseUiConfig, firebaseUIService) {
        this.angularFireAuth = angularFireAuth;
        this.firebaseUiConfig = firebaseUiConfig;
        this.firebaseUIService = firebaseUIService;
        this.signInSuccessCallback = new EventEmitter();
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    FirebaseuiAngularLibraryComponent.getAuthProvider = /**
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        switch (provider) {
            case AuthProvider.Google:
                return GoogleAuthProvider.PROVIDER_ID;
            case AuthProvider.Facebook:
                return FacebookAuthProvider.PROVIDER_ID;
            case AuthProvider.Twitter:
                return TwitterAuthProvider.PROVIDER_ID;
            case AuthProvider.Github:
                return GithubAuthProvider.PROVIDER_ID;
            case AuthProvider.Password:
                return EmailAuthProvider.PROVIDER_ID;
            case AuthProvider.Phone:
                return PhoneAuthProvider.PROVIDER_ID;
        }
    };
    /**
     * @return {?}
     */
    FirebaseuiAngularLibraryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscription = this.angularFireAuth.authState.subscribe(function (value) {
            if (!value) {
                if (_this.firebaseUiConfig.providers.length !== 0) {
                    _this.firebaseUIPopup();
                }
                else {
                    throw new Error('There must be at least one AuthProvider.');
                }
            }
        });
    };
    /**
     * @return {?}
     */
    FirebaseuiAngularLibraryComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (!!this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    /**
     * @param {?} authConfig
     * @return {?}
     */
    FirebaseuiAngularLibraryComponent.prototype.getUIAuthConfig = /**
     * @param {?} authConfig
     * @return {?}
     */
    function (authConfig) {
        var _this = this;
        var /** @type {?} */ authProviders = [];
        try {
            for (var _a = tslib_1.__values(authConfig.providers), _b = _a.next(); !_b.done; _b = _a.next()) {
                var provider = _b.value;
                if (!!(/** @type {?} */ (provider)).customConfig) {
                    provider = (/** @type {?} */ (provider));
                    var /** @type {?} */ providerWithConfig = provider.customConfig;
                    providerWithConfig['provider'] = FirebaseuiAngularLibraryComponent.getAuthProvider(provider.provider);
                    authProviders.push(providerWithConfig);
                }
                else {
                    authProviders.push(FirebaseuiAngularLibraryComponent.getAuthProvider(/** @type {?} */ (provider)));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var /** @type {?} */ tosURL = authConfig.tos ? authConfig.tos : '';
        var /** @type {?} */ authMethod = 'popup';
        switch (authConfig.method) {
            case AuthMethods.Redirect:
                authMethod = 'redirect';
                break;
            case null:
            case AuthMethods.Popup:
            default:
                break;
        }
        var /** @type {?} */ credentialHelper;
        switch (authConfig.credentialHelper) {
            case CredentialHelper.None:
                credentialHelper = firebaseui.auth.CredentialHelper.NONE;
                break;
            case CredentialHelper.OneTap:
                credentialHelper = firebaseui.auth.CredentialHelper.GOOGLE_YOLO;
                break;
            case CredentialHelper.AccountChooser:
            default:
                credentialHelper = firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM;
                break;
        }
        var /** @type {?} */ nativeConfiguration = {
            callbacks: {
                signInSuccess: function (currentUser, credential, redirectUrl) {
                    _this.signInSuccessCallback.emit({
                        currentUser: currentUser,
                        credential: credential,
                        redirectUrl: redirectUrl
                    });
                    return !!authConfig.signInSuccessUrl;
                }
            },
            signInFlow: authMethod,
            signInOptions: authProviders,
            tosUrl: tosURL,
            credentialHelper: credentialHelper
        };
        if (!!authConfig.signInSuccessUrl) {
            nativeConfiguration.signInSuccessUrl = authConfig.signInSuccessUrl;
        }
        return nativeConfiguration;
        var e_1, _c;
    };
    /**
     * @return {?}
     */
    FirebaseuiAngularLibraryComponent.prototype.firebaseUIPopup = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;
        firebaseUiInstance.start('#firebaseui-auth-container', this.getUIAuthConfig(this.firebaseUiConfig));
    };
    FirebaseuiAngularLibraryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'firebase-ui',
                    template: "\n    <div id=\"firebaseui-auth-container\"></div>"
                },] },
    ];
    /** @nocollapse */
    FirebaseuiAngularLibraryComponent.ctorParameters = function () { return [
        { type: AngularFireAuth, },
        { type: FirebaseUIAuthConfig, },
        { type: FirebaseuiAngularLibraryService, },
    ]; };
    FirebaseuiAngularLibraryComponent.propDecorators = {
        "signInSuccessCallback": [{ type: Output, args: ['signInSuccess',] },],
    };
    return FirebaseuiAngularLibraryComponent;
}());
export { FirebaseuiAngularLibraryComponent };
function FirebaseuiAngularLibraryComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    FirebaseuiAngularLibraryComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    FirebaseuiAngularLibraryComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    FirebaseuiAngularLibraryComponent.propDecorators;
    /** @type {?} */
    FirebaseuiAngularLibraryComponent.prototype.signInSuccessCallback;
    /** @type {?} */
    FirebaseuiAngularLibraryComponent.prototype.subscription;
    /** @type {?} */
    FirebaseuiAngularLibraryComponent.prototype.angularFireAuth;
    /** @type {?} */
    FirebaseuiAngularLibraryComponent.prototype.firebaseUiConfig;
    /** @type {?} */
    FirebaseuiAngularLibraryComponent.prototype.firebaseUIService;
}
/**
 * @record
 */
function FirebaseUINativeConfiguration() { }
function FirebaseUINativeConfiguration_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.callbacks;
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.credentialHelper;
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.queryParameterForSignInSuccessUrl;
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.queryParameterForWidgetMode;
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.signInFlow;
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.signInOptions;
    /** @type {?|undefined} */
    FirebaseUINativeConfiguration.prototype.signInSuccessUrl;
    /** @type {?} */
    FirebaseUINativeConfiguration.prototype.tosUrl;
}

//# sourceMappingURL=data:application/json;base64,